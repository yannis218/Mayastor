// The definition of mayastor gRPC interface.
// This interface is supposed to be independent on particular computing
// environment (i.e. kubernetes).

syntax = "proto3";

option java_multiple_files = true;
option java_package = "io.openebs.mayastor";
option java_outer_classname = "MayastorProto";

package mayastor;

// Means no arguments or no return value.
message Null {}

// I/O interface used for underlying disks in a pool
enum PoolIoIf {
  POOL_IO_AUTO = 0;    // prefer uring if supported, falling back to aio
  POOL_IO_AIO = 1;     // Linux AIO
  POOL_IO_URING = 2;   // io_uring, requires Linux 5.1
}

// Create pool arguments.
// Currently we support only concatenation of disks (RAID-0).
message CreatePoolRequest {
  string name = 1;           // name of the pool
  repeated string disks = 2; // absolute disk device paths to be claimed by the pool
  uint32 block_size = 3; // when using files, we need to specify the block_size
  PoolIoIf io_if = 4;        // I/O interface
}

// State of the storage pool (terminology comes from ZFS).
enum PoolState {
  POOL_ONLINE = 0;   // the pool is in normal working order
  POOL_DEGRADED = 1; // the pool has experienced a failure but can still function
  POOL_FAULTED = 2;  // the pool is completely inaccessible
}

// Storage pool properties
message Pool {
  string name = 1;            // name of the pool
  repeated string disks = 2;  // absolute disk paths claimed by the pool
  PoolState state = 3;        // current state of the pool
  uint64 capacity = 5;        // size of the pool in bytes
  uint64 used = 6;            // used bytes from the pool
}

// Destroy pool arguments.
message DestroyPoolRequest {
  string name = 1;  // name of the pool
}

// List of pools and their properties.
message ListPoolsReply {
  repeated Pool pools = 1;  // list of the pools
}

// Protocol for remote storage access which exposes a replica.
enum ShareProtocolReplica {
  REPLICA_NONE = 0;   // not exposed
  REPLICA_NVMF = 1;   // NVMe over Fabrics (TCP)
  REPLICA_ISCSI = 2;  // iSCSI
}

// Note that enum values use C++ scoping rules, meaning that enum values are siblings of their type,
// not children of it.
// So cannot use NBD, NVMF, and ISCSI as symbols for ShareProtocolNexus
enum ShareProtocolNexus {
  NEXUS_NBD = 0;    // local
  NEXUS_NVMF = 1;   // NVMe over Fabrics (TCP)
  NEXUS_ISCSI = 2;  // iSCSI
}

// Create replica arguments.
message CreateReplicaRequest {
  string uuid = 1;  // uuid of the replica
  string pool = 2;  // name of the pool
  uint64 size = 3;  // size of the replica in bytes
  bool thin = 4;    // thin provisioning
  ShareProtocolReplica share = 5;  // protocol to expose the replica over
}

// Create replica response.
message CreateReplicaReply {
  string uri = 1;   // uri under which the replica is accessible by nexus
}

// Destroy replica arguments.
message DestroyReplicaRequest {
  string uuid = 1;  // name of the replica
}

// Replica properties
message Replica {
  string uuid = 1;  // uuid of the replica
  string pool = 2;  // name of the pool
  bool thin = 3;    // thin provisioning
  uint64 size = 4;  // size of the replica in bytes
  ShareProtocolReplica share = 5;  // protocol used for exposing the replica
  string uri = 6;   // uri usable by nexus to access it
}

// List of replicas and their properties.
message ListReplicasReply {
  repeated Replica replicas = 1;  // list of the replicas
}

// NOTE: We use struct instead of more suitable map type, because JS protobuf
// lib has problem (yields garbage) when decoding maps containing u64:
// https://github.com/protobufjs/protobuf.js/issues/1203
message Stats {
  uint64 num_read_ops = 1;
  uint64 num_write_ops = 2;
  uint64 bytes_read = 3;
  uint64 bytes_written = 4;
}

// Replica stats
message ReplicaStats {
  string uuid = 1;  // uuid of the replica
  string pool = 2;  // name of the pool
  Stats stats = 3;  // stat counters
}

// List of replicas and their properties.
message StatReplicasReply {
  repeated ReplicaStats replicas = 1;  // list of the replicas
}

// Share replica request.
message ShareReplicaRequest {
  string uuid = 1;  // uuid of the replica
  ShareProtocolReplica share = 2;  // protocol used for exposing the replica
                            // Use "NONE" to disable remote access.
}

// Share replica response.
message ShareReplicaReply {
  string uri = 1;   // uri under which the replica is accessible by nexus
}

// Create nexus arguments.
message CreateNexusRequest {
  string uuid = 1; // this UUID will be set in as the UUID
  uint64 size = 2; // size of the device in bytes
  // replica can be iscsi and nvmf remote targets or a local spdk bdev
  // (i.e. bdev:///name-of-the-bdev).
  repeated string children = 3; // uris to the targets we connect to
}

// represents a child device part of a nexus
message Child {
  string uri = 1;   // uri of the child device
  string state = 2; // TODO: enum
}

// represents a nexus device
message Nexus {
  string uuid = 1;             // name of the nexus
  uint64 size = 2;             // size of the volume in bytes
  string state = 3;            // current state of the nexus (TODO: enum)
  repeated Child children = 4; // array of children
  // Path to device file for the volume (missing if not published).
  // Missing property and empty string are treated the same.
  string device_path = 5;
  uint64 rebuilds = 6;         // total number of rebuild tasks
}

message ListNexusReply {
  repeated Nexus nexus_list = 1;
}

message DestroyNexusRequest   {
  string uuid = 1;    // uuid of the nexus
}

message AddChildNexusRequest {
  string uuid = 1;    // uuid of the nexus
  string uri = 2;     // URI of the child device to be added
}

message RemoveChildNexusRequest {
  string uuid = 1;    // uuid of the nexus
  string uri = 2;     // URI of the child device to be removed
}

// this message will be subject to change as we will add support for remote
// storage protocols.
message PublishNexusRequest {
  string uuid = 1; // uuid of the nexus which to create device for
  string key = 2; // encryption key
  ShareProtocolNexus share = 3;  // protocol used for the front end.
}

message PublishNexusReply {
  string device_path = 1; // i.e. /dev/nbdX
}

message UnpublishNexusRequest {
  string uuid = 1;   // uuid of the nexus which to destroy
}

enum ChildAction {
  offline= 0;
  online = 1;
}

message ChildNexusRequest {
  string uuid = 1;
  string uri =2;
  ChildAction action = 3;
}

message RebuildStateRequest {
  string uuid = 1;  // uuid of the nexus
  string uri = 2;   // uri of the destination child
}

message RebuildStateReply {
  string state = 1; // current rebuild state (i.e. ready/running/completed etc.)
}

message StartRebuildRequest {
  string uuid = 1;  // uuid of the nexus
  string uri = 2;   // uri of the child to be rebuilt
}

message StopRebuildRequest {
  string uuid = 1;  // uuid of the nexus
  string uri = 2;   // uri of the destination child
}

message RebuildProgressRequest {
  string uuid = 1;  // uuid of the nexus
}

message RebuildProgressReply {
  string progress = 1;  // progress percentage
}
